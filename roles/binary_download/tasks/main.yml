# Copyright (c) 2023 VEXXHOST, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Set facts
  ansible.builtin.set_fact:
    binary_download_force_cache: "{{ true if binary_download_run_once else binary_download_force_cache }}"

- name: Starting download of file
  ansible.builtin.debug:
    msg: "{{ binary_download.url }}"
  run_once: "{{ binary_download_run_once }}"

- name: Set pathname of cached file
  ansible.builtin.set_fact:
    file_path_cached: "{{ binary_download_cache_dir }}/{{ binary_download.dest | basename }}"

- name: Create destination directory on node
  ansible.builtin.file:
    path: "{{ binary_download.dest | dirname }}"
    owner: "{{ binary_download.owner | default(omit) }}"
    mode: 0755
    state: directory
    recurse: true

- name: Create local cache directory
  ansible.builtin.file:
    path: "{{ file_path_cached | dirname }}"
    state: directory
    recurse: true
  delegate_to: localhost
  connection: local
  delegate_facts: false
  run_once: true
  become: false
  when:
    - binary_download_force_cache | bool

- name: Create cache directory on binary_download_delegate host
  ansible.builtin.file:
    path: "{{ file_path_cached | dirname }}"
    state: directory
    recurse: true
  delegate_to: "{{ binary_download_delegate }}"
  delegate_facts: false
  run_once: true
  when:
    - binary_download_force_cache | bool
    - not binary_download_localhost | bool

# This must always be called, to check if the checksum matches. On no-match the file is re-downloaded.
# This task will avoid logging it's parameters to not leak environment passwords in the log
- name: Download item
  ansible.builtin.get_url:
    url: "{{ binary_download.url }}"
    dest: "{{ file_path_cached if binary_download_force_cache else binary_download.dest }}"
    owner: "{{ omit if binary_download_localhost else (binary_download.owner | default(omit)) }}"
    mode: "{{ omit if binary_download_localhost else (binary_download.mode | default(omit)) }}"
    checksum: "{{ 'sha256:' + binary_download.sha256 if binary_download.sha256 else omit }}"
    validate_certs: "{{ binary_download_validate_certs }}"
    url_username: "{{ binary_download.username | default(omit) }}"
    url_password: "{{ binary_download.password | default(omit) }}"
    force_basic_auth: "{{ binary_download.force_basic_auth | default(omit) }}"
  delegate_to: "{{ binary_download_delegate if binary_download_force_cache else inventory_hostname }}"
  run_once: "{{ binary_download_force_cache }}"
  register: get_url_result
  become: "{{ not binary_download_localhost }}"
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 4
  no_log: "{{ not (binary_download_show_logs | bool) }}"

- name: Copy file back to ansible host file cache
  synchronize:
    src: "{{ file_path_cached }}"
    dest: "{{ file_path_cached }}"
    use_ssh_args: true
    mode: pull
  when:
    - binary_download_force_cache | bool
    - not binary_download_localhost | bool
    - binary_download_delegate == inventory_hostname

- name: Copy file from cache to nodes if it is available
  synchronize:
    src: "{{ file_path_cached }}"
    dest: "{{ binary_download.dest }}"
    use_ssh_args: true
    mode: push
  register: get_task
  until: get_task is succeeded
  retries: 4
  when:
    - binary_download_force_cache | bool

- name: Set mode and owner
  ansible.builtin.file:
    path: "{{ binary_download.dest }}"
    mode: "{{ binary_download.mode | default(omit) }}"
    owner: "{{ binary_download.owner | default(omit) }}"
  when:
    - binary_download_force_cache | bool

- name: Extract file archives
  ansible.builtin.include_tasks: "extract_file.yml"
